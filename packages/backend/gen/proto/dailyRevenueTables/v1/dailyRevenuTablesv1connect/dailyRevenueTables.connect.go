// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/dailyRevenueTables/v1/dailyRevenueTables.proto

package dailyRevenuTablesv1connect

import (
	v1 "backend/gen/proto/dailyRevenueTables/v1"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DailyRevenueTablesServiceName is the fully-qualified name of the DailyRevenueTablesService
	// service.
	DailyRevenueTablesServiceName = "proto.dailyRevenueTables.v1.DailyRevenueTablesService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DailyRevenueTablesServiceGetDailyRevenueTablesProcedure is the fully-qualified name of the
	// DailyRevenueTablesService's GetDailyRevenueTables RPC.
	DailyRevenueTablesServiceGetDailyRevenueTablesProcedure = "/proto.dailyRevenueTables.v1.DailyRevenueTablesService/GetDailyRevenueTables"
	// DailyRevenueTablesServiceGetDailyRevenueTableProcedure is the fully-qualified name of the
	// DailyRevenueTablesService's GetDailyRevenueTable RPC.
	DailyRevenueTablesServiceGetDailyRevenueTableProcedure = "/proto.dailyRevenueTables.v1.DailyRevenueTablesService/GetDailyRevenueTable"
	// DailyRevenueTablesServiceCreateDailyRevenueTableProcedure is the fully-qualified name of the
	// DailyRevenueTablesService's CreateDailyRevenueTable RPC.
	DailyRevenueTablesServiceCreateDailyRevenueTableProcedure = "/proto.dailyRevenueTables.v1.DailyRevenueTablesService/CreateDailyRevenueTable"
	// DailyRevenueTablesServiceUpdateDailyRevenueTableProcedure is the fully-qualified name of the
	// DailyRevenueTablesService's UpdateDailyRevenueTable RPC.
	DailyRevenueTablesServiceUpdateDailyRevenueTableProcedure = "/proto.dailyRevenueTables.v1.DailyRevenueTablesService/UpdateDailyRevenueTable"
	// DailyRevenueTablesServiceDeleteDailyRevenueTableProcedure is the fully-qualified name of the
	// DailyRevenueTablesService's DeleteDailyRevenueTable RPC.
	DailyRevenueTablesServiceDeleteDailyRevenueTableProcedure = "/proto.dailyRevenueTables.v1.DailyRevenueTablesService/DeleteDailyRevenueTable"
	// DailyRevenueTablesServiceAddTaxProcedure is the fully-qualified name of the
	// DailyRevenueTablesService's AddTax RPC.
	DailyRevenueTablesServiceAddTaxProcedure = "/proto.dailyRevenueTables.v1.DailyRevenueTablesService/AddTax"
	// DailyRevenueTablesServiceUpdateTaxProcedure is the fully-qualified name of the
	// DailyRevenueTablesService's UpdateTax RPC.
	DailyRevenueTablesServiceUpdateTaxProcedure = "/proto.dailyRevenueTables.v1.DailyRevenueTablesService/UpdateTax"
	// DailyRevenueTablesServiceDeleteTaxProcedure is the fully-qualified name of the
	// DailyRevenueTablesService's DeleteTax RPC.
	DailyRevenueTablesServiceDeleteTaxProcedure = "/proto.dailyRevenueTables.v1.DailyRevenueTablesService/DeleteTax"
	// DailyRevenueTablesServiceAddDatasetEntryProcedure is the fully-qualified name of the
	// DailyRevenueTablesService's AddDatasetEntry RPC.
	DailyRevenueTablesServiceAddDatasetEntryProcedure = "/proto.dailyRevenueTables.v1.DailyRevenueTablesService/AddDatasetEntry"
	// DailyRevenueTablesServiceUpdateDatasetEntryProcedure is the fully-qualified name of the
	// DailyRevenueTablesService's UpdateDatasetEntry RPC.
	DailyRevenueTablesServiceUpdateDatasetEntryProcedure = "/proto.dailyRevenueTables.v1.DailyRevenueTablesService/UpdateDatasetEntry"
	// DailyRevenueTablesServiceDeleteDatasetEntryProcedure is the fully-qualified name of the
	// DailyRevenueTablesService's DeleteDatasetEntry RPC.
	DailyRevenueTablesServiceDeleteDatasetEntryProcedure = "/proto.dailyRevenueTables.v1.DailyRevenueTablesService/DeleteDatasetEntry"
)

// DailyRevenueTablesServiceClient is a client for the
// proto.dailyRevenueTables.v1.DailyRevenueTablesService service.
type DailyRevenueTablesServiceClient interface {
	// get all tables
	GetDailyRevenueTables(context.Context, *connect.Request[v1.GetDailyRevenueTablesRequest]) (*connect.Response[v1.GetDailyRevenueTablesResponse], error)
	// get single table
	GetDailyRevenueTable(context.Context, *connect.Request[v1.IDParam]) (*connect.Response[v1.DailyRevenueTable], error)
	// create, update, delete single
	CreateDailyRevenueTable(context.Context, *connect.Request[v1.DailyRevenueTable]) (*connect.Response[v1.DailyRevenueTable], error)
	UpdateDailyRevenueTable(context.Context, *connect.Request[v1.DailyRevenueTable]) (*connect.Response[v1.DailyRevenueTable], error)
	DeleteDailyRevenueTable(context.Context, *connect.Request[v1.IDParam]) (*connect.Response[v1.DailyRevenueTable], error)
	AddTax(context.Context, *connect.Request[v1.Tax]) (*connect.Response[v1.Tax], error)
	UpdateTax(context.Context, *connect.Request[v1.Tax]) (*connect.Response[v1.Tax], error)
	DeleteTax(context.Context, *connect.Request[v1.IDParam]) (*connect.Response[v1.Tax], error)
	AddDatasetEntry(context.Context, *connect.Request[v1.DatasetEntry]) (*connect.Response[v1.DatasetEntry], error)
	UpdateDatasetEntry(context.Context, *connect.Request[v1.DatasetEntry]) (*connect.Response[v1.DatasetEntry], error)
	DeleteDatasetEntry(context.Context, *connect.Request[v1.IDParam]) (*connect.Response[v1.DatasetEntry], error)
}

// NewDailyRevenueTablesServiceClient constructs a client for the
// proto.dailyRevenueTables.v1.DailyRevenueTablesService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDailyRevenueTablesServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DailyRevenueTablesServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	dailyRevenueTablesServiceMethods := v1.File_proto_dailyRevenueTables_v1_dailyRevenueTables_proto.Services().ByName("DailyRevenueTablesService").Methods()
	return &dailyRevenueTablesServiceClient{
		getDailyRevenueTables: connect.NewClient[v1.GetDailyRevenueTablesRequest, v1.GetDailyRevenueTablesResponse](
			httpClient,
			baseURL+DailyRevenueTablesServiceGetDailyRevenueTablesProcedure,
			connect.WithSchema(dailyRevenueTablesServiceMethods.ByName("GetDailyRevenueTables")),
			connect.WithClientOptions(opts...),
		),
		getDailyRevenueTable: connect.NewClient[v1.IDParam, v1.DailyRevenueTable](
			httpClient,
			baseURL+DailyRevenueTablesServiceGetDailyRevenueTableProcedure,
			connect.WithSchema(dailyRevenueTablesServiceMethods.ByName("GetDailyRevenueTable")),
			connect.WithClientOptions(opts...),
		),
		createDailyRevenueTable: connect.NewClient[v1.DailyRevenueTable, v1.DailyRevenueTable](
			httpClient,
			baseURL+DailyRevenueTablesServiceCreateDailyRevenueTableProcedure,
			connect.WithSchema(dailyRevenueTablesServiceMethods.ByName("CreateDailyRevenueTable")),
			connect.WithClientOptions(opts...),
		),
		updateDailyRevenueTable: connect.NewClient[v1.DailyRevenueTable, v1.DailyRevenueTable](
			httpClient,
			baseURL+DailyRevenueTablesServiceUpdateDailyRevenueTableProcedure,
			connect.WithSchema(dailyRevenueTablesServiceMethods.ByName("UpdateDailyRevenueTable")),
			connect.WithClientOptions(opts...),
		),
		deleteDailyRevenueTable: connect.NewClient[v1.IDParam, v1.DailyRevenueTable](
			httpClient,
			baseURL+DailyRevenueTablesServiceDeleteDailyRevenueTableProcedure,
			connect.WithSchema(dailyRevenueTablesServiceMethods.ByName("DeleteDailyRevenueTable")),
			connect.WithClientOptions(opts...),
		),
		addTax: connect.NewClient[v1.Tax, v1.Tax](
			httpClient,
			baseURL+DailyRevenueTablesServiceAddTaxProcedure,
			connect.WithSchema(dailyRevenueTablesServiceMethods.ByName("AddTax")),
			connect.WithClientOptions(opts...),
		),
		updateTax: connect.NewClient[v1.Tax, v1.Tax](
			httpClient,
			baseURL+DailyRevenueTablesServiceUpdateTaxProcedure,
			connect.WithSchema(dailyRevenueTablesServiceMethods.ByName("UpdateTax")),
			connect.WithClientOptions(opts...),
		),
		deleteTax: connect.NewClient[v1.IDParam, v1.Tax](
			httpClient,
			baseURL+DailyRevenueTablesServiceDeleteTaxProcedure,
			connect.WithSchema(dailyRevenueTablesServiceMethods.ByName("DeleteTax")),
			connect.WithClientOptions(opts...),
		),
		addDatasetEntry: connect.NewClient[v1.DatasetEntry, v1.DatasetEntry](
			httpClient,
			baseURL+DailyRevenueTablesServiceAddDatasetEntryProcedure,
			connect.WithSchema(dailyRevenueTablesServiceMethods.ByName("AddDatasetEntry")),
			connect.WithClientOptions(opts...),
		),
		updateDatasetEntry: connect.NewClient[v1.DatasetEntry, v1.DatasetEntry](
			httpClient,
			baseURL+DailyRevenueTablesServiceUpdateDatasetEntryProcedure,
			connect.WithSchema(dailyRevenueTablesServiceMethods.ByName("UpdateDatasetEntry")),
			connect.WithClientOptions(opts...),
		),
		deleteDatasetEntry: connect.NewClient[v1.IDParam, v1.DatasetEntry](
			httpClient,
			baseURL+DailyRevenueTablesServiceDeleteDatasetEntryProcedure,
			connect.WithSchema(dailyRevenueTablesServiceMethods.ByName("DeleteDatasetEntry")),
			connect.WithClientOptions(opts...),
		),
	}
}

// dailyRevenueTablesServiceClient implements DailyRevenueTablesServiceClient.
type dailyRevenueTablesServiceClient struct {
	getDailyRevenueTables   *connect.Client[v1.GetDailyRevenueTablesRequest, v1.GetDailyRevenueTablesResponse]
	getDailyRevenueTable    *connect.Client[v1.IDParam, v1.DailyRevenueTable]
	createDailyRevenueTable *connect.Client[v1.DailyRevenueTable, v1.DailyRevenueTable]
	updateDailyRevenueTable *connect.Client[v1.DailyRevenueTable, v1.DailyRevenueTable]
	deleteDailyRevenueTable *connect.Client[v1.IDParam, v1.DailyRevenueTable]
	addTax                  *connect.Client[v1.Tax, v1.Tax]
	updateTax               *connect.Client[v1.Tax, v1.Tax]
	deleteTax               *connect.Client[v1.IDParam, v1.Tax]
	addDatasetEntry         *connect.Client[v1.DatasetEntry, v1.DatasetEntry]
	updateDatasetEntry      *connect.Client[v1.DatasetEntry, v1.DatasetEntry]
	deleteDatasetEntry      *connect.Client[v1.IDParam, v1.DatasetEntry]
}

// GetDailyRevenueTables calls
// proto.dailyRevenueTables.v1.DailyRevenueTablesService.GetDailyRevenueTables.
func (c *dailyRevenueTablesServiceClient) GetDailyRevenueTables(ctx context.Context, req *connect.Request[v1.GetDailyRevenueTablesRequest]) (*connect.Response[v1.GetDailyRevenueTablesResponse], error) {
	return c.getDailyRevenueTables.CallUnary(ctx, req)
}

// GetDailyRevenueTable calls
// proto.dailyRevenueTables.v1.DailyRevenueTablesService.GetDailyRevenueTable.
func (c *dailyRevenueTablesServiceClient) GetDailyRevenueTable(ctx context.Context, req *connect.Request[v1.IDParam]) (*connect.Response[v1.DailyRevenueTable], error) {
	return c.getDailyRevenueTable.CallUnary(ctx, req)
}

// CreateDailyRevenueTable calls
// proto.dailyRevenueTables.v1.DailyRevenueTablesService.CreateDailyRevenueTable.
func (c *dailyRevenueTablesServiceClient) CreateDailyRevenueTable(ctx context.Context, req *connect.Request[v1.DailyRevenueTable]) (*connect.Response[v1.DailyRevenueTable], error) {
	return c.createDailyRevenueTable.CallUnary(ctx, req)
}

// UpdateDailyRevenueTable calls
// proto.dailyRevenueTables.v1.DailyRevenueTablesService.UpdateDailyRevenueTable.
func (c *dailyRevenueTablesServiceClient) UpdateDailyRevenueTable(ctx context.Context, req *connect.Request[v1.DailyRevenueTable]) (*connect.Response[v1.DailyRevenueTable], error) {
	return c.updateDailyRevenueTable.CallUnary(ctx, req)
}

// DeleteDailyRevenueTable calls
// proto.dailyRevenueTables.v1.DailyRevenueTablesService.DeleteDailyRevenueTable.
func (c *dailyRevenueTablesServiceClient) DeleteDailyRevenueTable(ctx context.Context, req *connect.Request[v1.IDParam]) (*connect.Response[v1.DailyRevenueTable], error) {
	return c.deleteDailyRevenueTable.CallUnary(ctx, req)
}

// AddTax calls proto.dailyRevenueTables.v1.DailyRevenueTablesService.AddTax.
func (c *dailyRevenueTablesServiceClient) AddTax(ctx context.Context, req *connect.Request[v1.Tax]) (*connect.Response[v1.Tax], error) {
	return c.addTax.CallUnary(ctx, req)
}

// UpdateTax calls proto.dailyRevenueTables.v1.DailyRevenueTablesService.UpdateTax.
func (c *dailyRevenueTablesServiceClient) UpdateTax(ctx context.Context, req *connect.Request[v1.Tax]) (*connect.Response[v1.Tax], error) {
	return c.updateTax.CallUnary(ctx, req)
}

// DeleteTax calls proto.dailyRevenueTables.v1.DailyRevenueTablesService.DeleteTax.
func (c *dailyRevenueTablesServiceClient) DeleteTax(ctx context.Context, req *connect.Request[v1.IDParam]) (*connect.Response[v1.Tax], error) {
	return c.deleteTax.CallUnary(ctx, req)
}

// AddDatasetEntry calls proto.dailyRevenueTables.v1.DailyRevenueTablesService.AddDatasetEntry.
func (c *dailyRevenueTablesServiceClient) AddDatasetEntry(ctx context.Context, req *connect.Request[v1.DatasetEntry]) (*connect.Response[v1.DatasetEntry], error) {
	return c.addDatasetEntry.CallUnary(ctx, req)
}

// UpdateDatasetEntry calls
// proto.dailyRevenueTables.v1.DailyRevenueTablesService.UpdateDatasetEntry.
func (c *dailyRevenueTablesServiceClient) UpdateDatasetEntry(ctx context.Context, req *connect.Request[v1.DatasetEntry]) (*connect.Response[v1.DatasetEntry], error) {
	return c.updateDatasetEntry.CallUnary(ctx, req)
}

// DeleteDatasetEntry calls
// proto.dailyRevenueTables.v1.DailyRevenueTablesService.DeleteDatasetEntry.
func (c *dailyRevenueTablesServiceClient) DeleteDatasetEntry(ctx context.Context, req *connect.Request[v1.IDParam]) (*connect.Response[v1.DatasetEntry], error) {
	return c.deleteDatasetEntry.CallUnary(ctx, req)
}

// DailyRevenueTablesServiceHandler is an implementation of the
// proto.dailyRevenueTables.v1.DailyRevenueTablesService service.
type DailyRevenueTablesServiceHandler interface {
	// get all tables
	GetDailyRevenueTables(context.Context, *connect.Request[v1.GetDailyRevenueTablesRequest]) (*connect.Response[v1.GetDailyRevenueTablesResponse], error)
	// get single table
	GetDailyRevenueTable(context.Context, *connect.Request[v1.IDParam]) (*connect.Response[v1.DailyRevenueTable], error)
	// create, update, delete single
	CreateDailyRevenueTable(context.Context, *connect.Request[v1.DailyRevenueTable]) (*connect.Response[v1.DailyRevenueTable], error)
	UpdateDailyRevenueTable(context.Context, *connect.Request[v1.DailyRevenueTable]) (*connect.Response[v1.DailyRevenueTable], error)
	DeleteDailyRevenueTable(context.Context, *connect.Request[v1.IDParam]) (*connect.Response[v1.DailyRevenueTable], error)
	AddTax(context.Context, *connect.Request[v1.Tax]) (*connect.Response[v1.Tax], error)
	UpdateTax(context.Context, *connect.Request[v1.Tax]) (*connect.Response[v1.Tax], error)
	DeleteTax(context.Context, *connect.Request[v1.IDParam]) (*connect.Response[v1.Tax], error)
	AddDatasetEntry(context.Context, *connect.Request[v1.DatasetEntry]) (*connect.Response[v1.DatasetEntry], error)
	UpdateDatasetEntry(context.Context, *connect.Request[v1.DatasetEntry]) (*connect.Response[v1.DatasetEntry], error)
	DeleteDatasetEntry(context.Context, *connect.Request[v1.IDParam]) (*connect.Response[v1.DatasetEntry], error)
}

// NewDailyRevenueTablesServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDailyRevenueTablesServiceHandler(svc DailyRevenueTablesServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	dailyRevenueTablesServiceMethods := v1.File_proto_dailyRevenueTables_v1_dailyRevenueTables_proto.Services().ByName("DailyRevenueTablesService").Methods()
	dailyRevenueTablesServiceGetDailyRevenueTablesHandler := connect.NewUnaryHandler(
		DailyRevenueTablesServiceGetDailyRevenueTablesProcedure,
		svc.GetDailyRevenueTables,
		connect.WithSchema(dailyRevenueTablesServiceMethods.ByName("GetDailyRevenueTables")),
		connect.WithHandlerOptions(opts...),
	)
	dailyRevenueTablesServiceGetDailyRevenueTableHandler := connect.NewUnaryHandler(
		DailyRevenueTablesServiceGetDailyRevenueTableProcedure,
		svc.GetDailyRevenueTable,
		connect.WithSchema(dailyRevenueTablesServiceMethods.ByName("GetDailyRevenueTable")),
		connect.WithHandlerOptions(opts...),
	)
	dailyRevenueTablesServiceCreateDailyRevenueTableHandler := connect.NewUnaryHandler(
		DailyRevenueTablesServiceCreateDailyRevenueTableProcedure,
		svc.CreateDailyRevenueTable,
		connect.WithSchema(dailyRevenueTablesServiceMethods.ByName("CreateDailyRevenueTable")),
		connect.WithHandlerOptions(opts...),
	)
	dailyRevenueTablesServiceUpdateDailyRevenueTableHandler := connect.NewUnaryHandler(
		DailyRevenueTablesServiceUpdateDailyRevenueTableProcedure,
		svc.UpdateDailyRevenueTable,
		connect.WithSchema(dailyRevenueTablesServiceMethods.ByName("UpdateDailyRevenueTable")),
		connect.WithHandlerOptions(opts...),
	)
	dailyRevenueTablesServiceDeleteDailyRevenueTableHandler := connect.NewUnaryHandler(
		DailyRevenueTablesServiceDeleteDailyRevenueTableProcedure,
		svc.DeleteDailyRevenueTable,
		connect.WithSchema(dailyRevenueTablesServiceMethods.ByName("DeleteDailyRevenueTable")),
		connect.WithHandlerOptions(opts...),
	)
	dailyRevenueTablesServiceAddTaxHandler := connect.NewUnaryHandler(
		DailyRevenueTablesServiceAddTaxProcedure,
		svc.AddTax,
		connect.WithSchema(dailyRevenueTablesServiceMethods.ByName("AddTax")),
		connect.WithHandlerOptions(opts...),
	)
	dailyRevenueTablesServiceUpdateTaxHandler := connect.NewUnaryHandler(
		DailyRevenueTablesServiceUpdateTaxProcedure,
		svc.UpdateTax,
		connect.WithSchema(dailyRevenueTablesServiceMethods.ByName("UpdateTax")),
		connect.WithHandlerOptions(opts...),
	)
	dailyRevenueTablesServiceDeleteTaxHandler := connect.NewUnaryHandler(
		DailyRevenueTablesServiceDeleteTaxProcedure,
		svc.DeleteTax,
		connect.WithSchema(dailyRevenueTablesServiceMethods.ByName("DeleteTax")),
		connect.WithHandlerOptions(opts...),
	)
	dailyRevenueTablesServiceAddDatasetEntryHandler := connect.NewUnaryHandler(
		DailyRevenueTablesServiceAddDatasetEntryProcedure,
		svc.AddDatasetEntry,
		connect.WithSchema(dailyRevenueTablesServiceMethods.ByName("AddDatasetEntry")),
		connect.WithHandlerOptions(opts...),
	)
	dailyRevenueTablesServiceUpdateDatasetEntryHandler := connect.NewUnaryHandler(
		DailyRevenueTablesServiceUpdateDatasetEntryProcedure,
		svc.UpdateDatasetEntry,
		connect.WithSchema(dailyRevenueTablesServiceMethods.ByName("UpdateDatasetEntry")),
		connect.WithHandlerOptions(opts...),
	)
	dailyRevenueTablesServiceDeleteDatasetEntryHandler := connect.NewUnaryHandler(
		DailyRevenueTablesServiceDeleteDatasetEntryProcedure,
		svc.DeleteDatasetEntry,
		connect.WithSchema(dailyRevenueTablesServiceMethods.ByName("DeleteDatasetEntry")),
		connect.WithHandlerOptions(opts...),
	)
	return "/proto.dailyRevenueTables.v1.DailyRevenueTablesService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DailyRevenueTablesServiceGetDailyRevenueTablesProcedure:
			dailyRevenueTablesServiceGetDailyRevenueTablesHandler.ServeHTTP(w, r)
		case DailyRevenueTablesServiceGetDailyRevenueTableProcedure:
			dailyRevenueTablesServiceGetDailyRevenueTableHandler.ServeHTTP(w, r)
		case DailyRevenueTablesServiceCreateDailyRevenueTableProcedure:
			dailyRevenueTablesServiceCreateDailyRevenueTableHandler.ServeHTTP(w, r)
		case DailyRevenueTablesServiceUpdateDailyRevenueTableProcedure:
			dailyRevenueTablesServiceUpdateDailyRevenueTableHandler.ServeHTTP(w, r)
		case DailyRevenueTablesServiceDeleteDailyRevenueTableProcedure:
			dailyRevenueTablesServiceDeleteDailyRevenueTableHandler.ServeHTTP(w, r)
		case DailyRevenueTablesServiceAddTaxProcedure:
			dailyRevenueTablesServiceAddTaxHandler.ServeHTTP(w, r)
		case DailyRevenueTablesServiceUpdateTaxProcedure:
			dailyRevenueTablesServiceUpdateTaxHandler.ServeHTTP(w, r)
		case DailyRevenueTablesServiceDeleteTaxProcedure:
			dailyRevenueTablesServiceDeleteTaxHandler.ServeHTTP(w, r)
		case DailyRevenueTablesServiceAddDatasetEntryProcedure:
			dailyRevenueTablesServiceAddDatasetEntryHandler.ServeHTTP(w, r)
		case DailyRevenueTablesServiceUpdateDatasetEntryProcedure:
			dailyRevenueTablesServiceUpdateDatasetEntryHandler.ServeHTTP(w, r)
		case DailyRevenueTablesServiceDeleteDatasetEntryProcedure:
			dailyRevenueTablesServiceDeleteDatasetEntryHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDailyRevenueTablesServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDailyRevenueTablesServiceHandler struct{}

func (UnimplementedDailyRevenueTablesServiceHandler) GetDailyRevenueTables(context.Context, *connect.Request[v1.GetDailyRevenueTablesRequest]) (*connect.Response[v1.GetDailyRevenueTablesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.dailyRevenueTables.v1.DailyRevenueTablesService.GetDailyRevenueTables is not implemented"))
}

func (UnimplementedDailyRevenueTablesServiceHandler) GetDailyRevenueTable(context.Context, *connect.Request[v1.IDParam]) (*connect.Response[v1.DailyRevenueTable], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.dailyRevenueTables.v1.DailyRevenueTablesService.GetDailyRevenueTable is not implemented"))
}

func (UnimplementedDailyRevenueTablesServiceHandler) CreateDailyRevenueTable(context.Context, *connect.Request[v1.DailyRevenueTable]) (*connect.Response[v1.DailyRevenueTable], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.dailyRevenueTables.v1.DailyRevenueTablesService.CreateDailyRevenueTable is not implemented"))
}

func (UnimplementedDailyRevenueTablesServiceHandler) UpdateDailyRevenueTable(context.Context, *connect.Request[v1.DailyRevenueTable]) (*connect.Response[v1.DailyRevenueTable], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.dailyRevenueTables.v1.DailyRevenueTablesService.UpdateDailyRevenueTable is not implemented"))
}

func (UnimplementedDailyRevenueTablesServiceHandler) DeleteDailyRevenueTable(context.Context, *connect.Request[v1.IDParam]) (*connect.Response[v1.DailyRevenueTable], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.dailyRevenueTables.v1.DailyRevenueTablesService.DeleteDailyRevenueTable is not implemented"))
}

func (UnimplementedDailyRevenueTablesServiceHandler) AddTax(context.Context, *connect.Request[v1.Tax]) (*connect.Response[v1.Tax], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.dailyRevenueTables.v1.DailyRevenueTablesService.AddTax is not implemented"))
}

func (UnimplementedDailyRevenueTablesServiceHandler) UpdateTax(context.Context, *connect.Request[v1.Tax]) (*connect.Response[v1.Tax], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.dailyRevenueTables.v1.DailyRevenueTablesService.UpdateTax is not implemented"))
}

func (UnimplementedDailyRevenueTablesServiceHandler) DeleteTax(context.Context, *connect.Request[v1.IDParam]) (*connect.Response[v1.Tax], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.dailyRevenueTables.v1.DailyRevenueTablesService.DeleteTax is not implemented"))
}

func (UnimplementedDailyRevenueTablesServiceHandler) AddDatasetEntry(context.Context, *connect.Request[v1.DatasetEntry]) (*connect.Response[v1.DatasetEntry], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.dailyRevenueTables.v1.DailyRevenueTablesService.AddDatasetEntry is not implemented"))
}

func (UnimplementedDailyRevenueTablesServiceHandler) UpdateDatasetEntry(context.Context, *connect.Request[v1.DatasetEntry]) (*connect.Response[v1.DatasetEntry], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.dailyRevenueTables.v1.DailyRevenueTablesService.UpdateDatasetEntry is not implemented"))
}

func (UnimplementedDailyRevenueTablesServiceHandler) DeleteDatasetEntry(context.Context, *connect.Request[v1.IDParam]) (*connect.Response[v1.DatasetEntry], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.dailyRevenueTables.v1.DailyRevenueTablesService.DeleteDatasetEntry is not implemented"))
}
